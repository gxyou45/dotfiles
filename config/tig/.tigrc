# Variables

set horizontal-scroll = 33% # Number of columns to scroll as % of width
set mouse             = yes # Enable mouse support?
set mouse-scroll      = 10  # Number of lines to scroll via the mouse
set line-graphics     = yes # Enum: ascii, default, utf-8
set tab-size          = 4   # Number of spaces to use when expanding tabs
set ignore-case       = yes # Ignore case when searching


# View settings

set blame-view  = date:default author:abbreviated file-name:auto id:yes,color line-number:yes,interval=5 text
set grep-view   = file-name:yes line-number:yes,interval=1 text
set main-view   = line-number:no,interval=5 id:yes date:default author:full commit-title:yes,graph,refs,overflow=no
set refs-view   = date:default author:full ref commit-title
set stash-view  = line-number:no,interval=5 id:no date:default author:full commit-title
set status-view = line-number:no,interval=5 status:short file-name
set tree-view   = line-number:no,interval=5 mode author:abbreviated file-size:units date:default id:no file-name
set pager-view  = line-number:yes,interval=10 text


# Colors

color cursor white 89
color status white default
color title-focus white 89
color date yellow default
color author green default
color main-head magenta default
color main-tag magenta default
color stat-staged green default
color stat-unstaged red default
color stat-untracked yellow default
color tree.header white default
color tree.directory cyan default


# Bindings

bind generic + !git commit --amend
bind generic u move-page-up
bind generic d move-page-down
bind generic F !git fetch
bind generic S :source ~/.tigrc # Reload ~/.tigrc
bind generic 9 !@sh -c "echo -n %(commit) | clipboard"

bind main ! !git revert %(commit)
bind main C !?git checkout %(commit)
bind main H !?git reset --hard %(commit)
bind main <C-R> !git rebase -i --autosquash %(commit)^
bind main P !?git push origin %(branch)
bind main T @git tag "%(prompt Enter tag name: )" %(commit)
bind main <C-T> @?git tag -d %(tag)
bind main <C-P> !git cherry-pick %(commit)
bind main F !@sh -c "git show %(commit) --pretty=format: --name-only | xargs | clipboard"
bind main E !<sh -c "vim -c 'Gedit %(commit)' $(ls | head -1)"
bind main V !<sh -c "vim $(git show %(commit) --pretty=format: --name-only | xargs)"

bind diff <Up> move-up
bind diff <Down> move-down
bind diff A !git add %(file)              # Add current file
bind diff C !git commit -av               # Add and commit
bind diff P !git add -p %(file)           # Partially add current file
bind diff F !@sh -c "git show %(commit) --pretty=format: --name-only | xargs | clipboard"
bind diff E !<sh -c "vim -c 'Gedit %(commit)' $(ls | head -1)"
bind diff V !<sh -c "vim $(git show %(commit) --pretty=format: --name-only | xargs)"
bind diff 4 !git diff %(commit)^ %(commit)

bind tree V !vim %(file)

bind branch N !@git branch %(prompt)
bind branch C !@git checkout %(branch)
bind branch <C-R> !@git rebase
bind branch D !@git branch -D %(branch)

bind status <C-R> !@git reset HEAD %(file)
bind status A !@git commit --amend
bind status N !@git add -N %(file)

bind stage 1 stage-update-line # Stage a single line
bind stage C !@git commit      # Commit staging changes

bind refs 3 !git rebase -i %(branch) # Rebase current branch on top of the selected branch
